
        // The list of 3-letter words from the provided file
        const wordList = `AAH
AAL
AAS
ABA
ABB
ABS
ABY
ACE
ACH
ACK
ACT
ADD
ADO
ADS
ADZ
AFF
AFT
AGA
AGE
AGO
AGS
AHA
AHI
AHS
AIA
AID
AIL
AIM
AIN
AIR
AIS
AIT
AJI
AKA
AKE
ALA
ALB
ALE
ALL
ALP
ALS
ALT
ALU
AMA
AME
AMI
AMP
AMU
ANA
AND
ANE
ANI
ANN
ANS
ANT
ANY
APE
APO
APP
APT
ARB
ARC
ARD
ARE
ARF
ARK
ARM
ARO
ARS
ART
ARY
ASH
ASK
ASP
ASS
ATE
ATS
ATT
AUA
AUE
AUF
AUK
AVA
AVE
AVI
AVO
AWA
AWE
AWK
AWL
AWN
AXE
AYE
AYS
AYU
AZO
BAA
BAC
BAD
BAE
BAG
BAH
BAL
BAM
BAN
BAO
BAP
BAR
BAS
BAT
BAW
BAY
BED
BEE
BEG
BEL
BEN
BES
BET
BEY
BEZ
BIB
BID
BIG
BIN
BIO
BIS
BIT
BIZ
BOA
BOB
BOD
BOG
BOH
BOI
BOK
BON
BOO
BOP
BOR
BOS
BOT
BOW
BOX
BOY
BRA
BRO
BRR
BRU
BUB
BUD
BUG
BUM
BUN
BUR
BUS
BUT
BUY
BYE
BYS
CAA
CAB
CAD
CAF
CAG
CAL
CAM
CAN
CAP
CAR
CAT
CAW
CAY
CAZ
CEE
CEL
CEP
CHA
CHE
CHI
CID
CIG
CIS
CIT
CLY
COB
COD
COG
COL
CON
COO
COP
COR
COS
COT
COW
COX
COY
COZ
CRU
CRY
CUB
CUD
CUE
CUM
CUP
CUR
CUT
CUZ
CWM
DAB
DAD
DAE
DAG
DAH
DAK
DAL
DAM
DAN
DAP
DAS
DAW
DAY
DEB
DEE
DEF
DEG
DEI
DEL
DEN
DEP
DEV
DEW
DEX
DEY
DIB
DID
DIE
DIF
DIG
DIM
DIN
DIP
DIS
DIT
DIV
DOB
DOC
DOD
DOE
DOF
DOG
DOH
DOL
DOM
DON
DOO
DOP
DOR
DOS
DOT
DOW
DOX
DOY
DRY
DSO
DUB
DUD
DUE
DUG
DUH
DUI
DUM
DUN
DUO
DUP
DUR
DUX
DYE
DZO
EAN
EAR
EAS
EAT
EAU
EBB
ECH
ECO
ECU
EDH
EDS
EEK
EEL
EEN
EEW
EFF
EFS
EFT
EGG
EGO
EHS
EIK
EKE
ELD
ELF
ELK
ELL
ELM
ELS
ELT
EME
EMO
EMS
EMU
END
ENE
ENG
ENS
EON
ERA
ERE
ERF
ERG
ERK
ERM
ERN
ERR
ERS
ESS
EST
ETA
ETH
EUK
EVE
EVO
EWE
EWK
EWT
EWW
EXO
EYE
FAA
FAB
FAD
FAE
FAG
FAH
FAM
FAN
FAP
FAR
FAS
FAT
FAV
FAW
FAX
FAY
FED
FEE
FEG
FEH
FEM
FEN
FER
FES
FET
FEU
FEW
FEY
FEZ
FIB
FID
FIE
FIG
FIL
FIN
FIR
FIT
FIX
FIZ
FLU
FLY
FOB
FOE
FOG
FOH
FON
FOO
FOP
FOR
FOU
FOX
FOY
FRA
FRO
FRY
FUB
FUD
FUG
FUM
FUN
FUR
GAB
GAD
GAE
GAG
GAK
GAL
GAM
GAN
GAP
GAR
GAS
GAT
GAU
GAW
GAY
GED
GEE
GEL
GEM
GEN
GEO
GER
GET
GEY
GHI
GIB
GID
GIE
GIF
GIG
GIN
GIO
GIP
GIS
GIT
GJU
GNU
GOA
GOB
GOD
GOE
GON
GOO
GOR
GOS
GOT
GOV
GOX
GRR
GUB
GUE
GUL
GUM
GUN
GUP
GUR
GUS
GUT
GUV
GUY
GYM
GYP
HAD
HAE
HAG
HAH
HAJ
HAM
HAN
HAO
HAP
HAS
HAT
HAW
HAY
HEH
HEM
HEN
HEP
HER
HES
HET
HEW
HEX
HEY
HIC
HID
HIE
HIM
HIN
HIP
HIS
HIT
HMM
HOA
HOB
HOC
HOD
HOE
HOG
HOH
HOI
HOM
HON
HOO
HOP
HOS
HOT
HOW
HOX
HOY
HUB
HUE
HUG
HUH
HUI
HUM
HUN
HUP
HUT
HYE
HYP
ICE
ICH
ICK
ICY
IDE
IDS
IFF
IFS
IGG
ILK
ILL
IMP
ING
INK
INN
INS
INT
ION
IOS
IRE
IRK
ISH
ISM
ISO
ITA
ITS
IVY
IWI
JAB
JAG
JAI
JAK
JAM
JAP
JAR
JAW
JAY
JEE
JET
JEU
JIB
JIG
JIN
JIZ
JOB
JOE
JOG
JOL
JOR
JOT
JOW
JOY
JUD
JUG
JUN
JUS
JUT
KAB
KAE
KAF
KAI
KAK
KAM
KAS
KAT
KAW
KAY
KEA
KEB
KED
KEF
KEG
KEN
KEP
KET
KEX
KEY
KHI
KID
KIF
KIN
KIP
KIR
KIS
KIT
KOA
KOB
KOI
KON
KOP
KOR
KOS
KOW
KUE
KYE
KYU
LAB
LAC
LAD
LAG
LAH
LAM
LAP
LAR
LAS
LAT
LAV
LAW
LAX
LAY
LEA
LED
LEE
LEG
LEI
LEK
LEP
LET
LEU
LEV
LEW
LEX
LEY
LIB
LID
LIE
LIG
LIN
LIP
LIS
LIT
LOB
LOC
LOD
LOG
LOO
LOP
LOR
LOS
LOT
LOU
LOW
LOX
LOY
LUD
LUG
LUM
LUN
LUR
LUV
LUX
LUZ
LYE
LYM
MAA
MAC
MAD
MAE
MAG
MAK
MAL
MAM
MAN
MAP
MAR
MAS
MAT
MAW
MAX
MAY
MED
MEE
MEG
MEH
MEL
MEM
MEN
MES
MET
MEU
MEW
MHO
MIB
MIC
MID
MIG
MIL
MIM
MIR
MIS
MIX
MIZ
MMM
MNA
MOA
MOB
MOC
MOD
MOE
MOG
MOI
MOL
MOM
MON
MOO
MOP
MOR
MOS
MOT
MOU
MOW
MOY
MOZ
MUD
MUG
MUM
MUN
MUS
MUT
MUX
MYC
NAB
NAE
NAG
NAH
NAM
NAN
NAP
NAS
NAT
NAV
NAW
NAY
NEB
NED
NEE
NEF
NEG
NEK
NEP
NET
NEW
NIB
NID
NIE
NIL
NIM
NIP
NIS
NIT
NIX
NOB
NOD
NOG
NOH
NOM
NON
NOO
NOR
NOS
NOT
NOW
NOX
NOY
NTH
NUB
NUG
NUN
NUR
NUS
NUT
NYE
NYM
NYS
OAF
OAK
OAR
OAT
OBA
OBE
OBI
OBO
OBS
OCA
OCH
ODA
ODD
ODE
ODS
OES
OFF
OFT
OHM
OHO
OHS
OIK
OIL
OIS
OKA
OKE
OLD
OLE
OLM
OMA
OMS
ONE
ONO
ONS
ONY
OOF
OOH
OOM
OON
OOP
OOR
OOS
OOT
OPA
OPE
OPS
OPT
ORA
ORB
ORC
ORD
ORE
ORF
ORG
ORS
ORT
OSE
OUD
OUK
OUP
OUR
OUS
OUT
OVA
OWE
OWL
OWN
OWO
OWT
OXO
OXY
OYE
OYS
PAC
PAD
PAH
PAK
PAL
PAM
PAN
PAP
PAR
PAS
PAT
PAV
PAW
PAX
PAY
PEA
PEC
PED
PEE
PEG
PEH
PEL
PEN
PEP
PER
PES
PET
PEW
PHI
PHO
PHT
PIA
PIC
PIE
PIG
PIN
PIP
PIR
PIS
PIT
PIU
PIX
PLU
PLY
POA
POD
POH
POI
POL
POM
POO
POP
POS
POT
POW
POX
POZ
PRE
PRO
PRY
PSI
PST
PUB
PUD
PUG
PUH
PUL
PUN
PUP
PUR
PUS
PUT
PUY
PWN
PYA
PYE
PYX
QAT
QIN
QIS
QUA
RAD
RAG
RAH
RAI
RAJ
RAM
RAN
RAP
RAS
RAT
RAV
RAW
RAX
RAY
REB
REC
RED
REE
REF
REG
REH
REI
REM
REN
REO
REP
RES
RET
REV
REW
REX
REZ
RHO
RHY
RIA
RIB
RID
RIF
RIG
RIM
RIN
RIP
RIT
RIZ
ROB
ROC
ROD
ROE
ROK
ROM
ROO
ROT
ROW
RUB
RUC
RUD
RUE
RUG
RUM
RUN
RUT
RYA
RYE
RYU
SAB
SAC
SAD
SAE
SAG
SAI
SAL
SAM
SAN
SAP
SAR
SAT
SAU
SAV
SAW
SAX
SAY
SAZ
SEA
SEC
SED
SEE
SEG
SEI
SEL
SEN
SER
SET
SEV
SEW
SEX
SEY
SEZ
SHA
SHE
SHH
SHO
SHY
SIB
SIC
SIF
SIG
SIK
SIM
SIN
SIP
SIR
SIS
SIT
SIX
SKA
SKI
SKY
SLY
SMA
SNY
SOB
SOC
SOD
SOG
SOH
SOL
SOM
SON
SOP
SOS
SOT
SOU
SOV
SOW
SOX
SOY
SOZ
SPA
SPY
SRI
STY
SUB
SUD
SUE
SUG
SUI
SUK
SUM
SUN
SUP
SUQ
SUR
SUS
SWY
SYE
SYN
TAB
TAD
TAE
TAG
TAI
TAJ
TAK
TAM
TAN
TAO
TAP
TAR
TAS
TAT
TAU
TAV
TAW
TAX
TAY
TEA
TEC
TED
TEE
TEF
TEG
TEL
TEN
TES
TET
TEW
TEX
THE
THO
THY
TIC
TID
TIE
TIG
TIK
TIL
TIN
TIP
TIS
TIT
TIX
TIZ
TOC
TOD
TOE
TOG
TOM
TON
TOO
TOP
TOR
TOT
TOW
TOY
TRY
TSK
TUB
TUG
TUI
TUM
TUN
TUP
TUT
TUX
TWA
TWO
TWP
TYE
TYG
UDO
UDS
UEY
UFO
UGH
UGS
UKE
ULE
ULU
UME
UMM
UMP
UMS
UMU
UNI
UNS
UPO
UPS
URB
URD
URE
URN
URP
USE
UTA
UTE
UTS
UTU
UVA
UWU
VAC
VAE
VAG
VAN
VAR
VAS
VAT
VAU
VAV
VAW
VAX
VEE
VEG
VET
VEX
VIA
VID
VIE
VIG
VIM
VIN
VIS
VLY
VOE
VOG
VOL
VOM
VOR
VOW
VOX
VUG
VUM
WAB
WAD
WAE
WAG
WAI
WAN
WAP
WAR
WAS
WAT
WAW
WAX
WAY
WAZ
WEB
WED
WEE
WEM
WEN
WET
WEX
WEY
WHA
WHO
WHY
WIG
WIN
WIS
WIT
WIZ
WOE
WOF
WOK
WON
WOO
WOP
WOS
WOT
WOW
WOX
WRY
WUD
WUS
WUZ
WYE
WYN
XED
XIS
YAD
YAE
YAG
YAH
YAK
YAM
YAP
YAR
YAS
YAW
YAY
YEA
YEH
YEN
YEP
YER
YES
YET
YEW
YEX
YEZ
YGO
YIN
YIP
YOB
YOD
YOK
YOM
YON
YOU
YOW
YUG
YUK
YUM
YUP
YUS
ZAG
ZAP
ZAS
ZAX
ZEA
ZED
ZEE
ZEK
ZEL
ZEN
ZEP
ZEX
ZHO
ZIG
ZIN
ZIP
ZIT
ZIZ
ZOA
ZOL
ZOO
ZOS
ZUZ
ZZZ`.split('\n').map(word => word.trim().toUpperCase()).filter(word => word.length > 0);

        let currentWord = '';
        let shuffledWord = '';
        let possibleWords = [];
        let guessedWords = new Set();

        const shuffledWordDisplay = document.getElementById('shuffled-word');
        const userInput = document.getElementById('user-input');
        const submitButton = document.getElementById('submit-button');
        const nextWordButton = document.getElementById('next-word-button');
        const messageBox = document.getElementById('message-box');
        const correctGuessesList = document.getElementById('correct-guesses-list');
        const guessedWordsUl = document.getElementById('guessed-words-ul');

        /**
         * Shuffles the letters of a given word.
         * @param {string} word The word to shuffle.
         * @returns {string} The shuffled word.
         */
        function shuffleWord(word) {
            const a = word.split('');
            for (let i = a.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [a[i], a[j]] = [a[j], a[i]];
            }
            return a.join('');
        }

        /**
         * Generates all permutations of a given string.
         * This function is used to find all possible words from an anagram.
         * @param {string} str The string to permute.
         * @returns {Set<string>} A set of all unique permutations.
         */
        function getPermutations(str) {
            const results = new Set();

            /**
             * Recursive helper function to generate permutations.
             * @param {string} currentPermutation The current permutation being built.
             * @param {string} remainingChars The characters remaining to be used.
             */
            function permute(currentPermutation, remainingChars) {
                if (remainingChars.length === 0) {
                    results.add(currentPermutation);
                    return;
                }

                for (let i = 0; i < remainingChars.length; i++) {
                    const char = remainingChars[i];
                    const newRemainingChars = remainingChars.slice(0, i) + remainingChars.slice(i + 1);
                    permute(currentPermutation + char, newRemainingChars);
                }
            }

            permute('', str);
            return results;
        }

        /**
         * Finds all valid words that can be formed from the letters of a given word.
         * @param {string} letters The letters to form words from.
         * @param {Array<string>} dictionary The list of valid words.
         * @returns {Array<string>} An array of valid words.
         */
        function findPossibleWords(letters, dictionary) {
            const possible = new Set();
            const sortedLetters = letters.split('').sort().join(''); // Sort for canonical representation

            // Iterate through the dictionary to find words that will work
            for (const word of dictionary) {
                // Only consider words of the same length for direct anagrams
                if (word.length === letters.length) {
                    const sortedWord = word.split('').sort().join('');
                    if (sortedWord === sortedLetters) {
                        possible.add(word);
                    }
                }
            }
            return Array.from(possible);
        }

        /**
         * Displays a message to the user.
         * @param {string} message The message to display.
         * @param {string} type The type of message (e.g., 'success', 'error', 'info').
         */
        function showMessage(message, type) {
            messageBox.textContent = message;
            messageBox.style.display = 'block';
            messageBox.className = 'message-box'; // Reset classes

            if (type === 'success') {
                messageBox.classList.add('bg-green-100', 'text-green-800', 'border-green-400');
            } else if (type === 'error') {
                messageBox.classList.add('bg-red-100', 'text-red-800', 'border-red-400');
            } else { // info
                messageBox.classList.add('bg-blue-100', 'text-blue-800', 'border-blue-400');
            }
        }

        /**
         * Hides the message box.
         */
        function hideMessage() {
            messageBox.style.display = 'none';
        }

        /**
         * Updates the list of correctly guessed words.
         */
        function updateGuessedWordsList() {
            guessedWordsUl.innerHTML = ''; // Clear previous list
            if (guessedWords.size > 0) {
                correctGuessesList.classList.remove('hidden');
                guessedWords.forEach(word => {
                    const listItem = document.createElement('li');
                    listItem.textContent = word;
                    guessedWordsUl.appendChild(listItem);
                });
            } else {
                correctGuessesList.classList.add('hidden');
            }
        }

        /**
         * Starts a new round of the game.
         */
        function newRound() {
            hideMessage();
            userInput.value = '';
            guessedWords.clear();
            updateGuessedWordsList();
            nextWordButton.classList.add('hidden');
            submitButton.classList.remove('hidden');
            userInput.disabled = false;

            // Choose a random word from the list
            currentWord = wordList[Math.floor(Math.random() * wordList.length)];

            // Find all possible words for the current anagram
            possibleWords = findPossibleWords(currentWord, wordList);

            // Shuffle the current word for display
            shuffledWord = shuffleWord(currentWord);
            // Ensure the shuffled word is different from the original if there's only one possible word
            while (shuffledWord === currentWord && possibleWords.length === 1) {
                shuffledWord = shuffleWord(currentWord);
            }
            shuffledWordDisplay.textContent = shuffledWord;
            userInput.focus();
        }

        /**
         * Handles the user's guess submission.
         */
        function handleSubmit() {
            const guess = userInput.value.trim().toUpperCase();
            userInput.value = ''; // Clear input after guess

            if (guess === '') {
                showMessage('Please enter a word!', 'info');
                return;
            }

            // Check if the guess is one of the possible words for the current anagram
            if (possibleWords.includes(guess)) {
                if (!guessedWords.has(guess)) {
                    guessedWords.add(guess);
                    showMessage(`Correct! You guessed "${guess}".`, 'success');
                    updateGuessedWordsList();

                    // Check if all possible words have been guessed
                    if (guessedWords.size === possibleWords.length) {
                        showMessage(`Excellent! You found all possible words for "${shuffledWord}".`, 'success');
                        messageBox.classList.add('correct-message');
                        submitButton.classList.add('hidden');
                        nextWordButton.classList.remove('hidden');
                        userInput.disabled = true;
                    }
                } else {
                    showMessage(`You already guessed "${guess}". Try another one!`, 'info');
                }
            } else {
                showMessage(`Incorrect. "${guess}" is not a valid word for this anagram.`, 'error');
            }
            userInput.focus(); // Keep focus on input for next guess
        }

        // Event Listeners
        submitButton.addEventListener('click', handleSubmit);
        nextWordButton.addEventListener('click', newRound);

        // Modify the keypress listener to handle both submit and next word
        document.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                if (!submitButton.classList.contains('hidden')) { // If submit button is visible
                    handleSubmit();
                } else if (!nextWordButton.classList.contains('hidden')) { // If next word button is visible
                    newRound();
                }
            }
        });

        // Initialize the game when the window loads
        window.onload = newRound;
